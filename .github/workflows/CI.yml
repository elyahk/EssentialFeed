name: Coverage Diff
env:
  ARTIFACT_PATH: "downloads"

on:
  push:
    branches:
      - master
      - main
  pull_request:

jobs:
  build-and-test-coverage:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2

      - name: Select xcode
        run: sudo xcode-select -switch /Applications/Xcode_13.1.0.app

      - name: Install Bundler dependencies
        run: bundle install

      - name: Install Cocoapods dependencies
        run: bundle exec pod install

      - name: Test
        run: xcodebuild clean build test -workspace EssentialFeed.xcworkspace -scheme "CI" CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO

#      - name: Build and Test
#        run: bundle exec fastlane macOS unit_tests

      - name: Generate Coverage
        run: bundle exec fastlane mac code_coverage

  coverage:
    runs-on: macos-latest
    needs: build-and-test-coverage
    steps:
      - name: Cache Code Coverage
        id: cache-code-coverage
        uses: actions/cache@v3
        with:
          path: downloads
          key: ${{ runner.os }}-code-coverage

      - name: Restore Code Coverage
        if: steps.cache-code-coverage.outputs.cache-hit != 'true'
        run: |
          mkdir downloads
          cp xcov_output/report.json downloads

      - name: Get Current Coverage Result
        id: coverage
        uses: notiz-dev/github-action-json-property@release
        with:
          path: 'xcov_output/report.json'
          prop_path: 'coverage'

      - name: Get Treshold Coverage Result
        id: treshold-coverage
        uses: notiz-dev/github-action-json-property@release
        with:
          path: 'downloads/report.json'
          prop_path: 'coverage'

      - name: Show Result
        env:
          CURRENT_COVERAGE: ${{steps.coverage.outputs.prop}}
          TRESHOLD_COVERAGE: ${{steps.treshold-coverage.outputs.prop}}
        run: |
          echo "Current: $CURRENT_COVERAGE"
          echo "Treshold: $TRESHOLD_COVERAGE"
      - name: Quality Gate - Test coverage shall be above threshold
        env:
          CURRENT_COVERAGE: ${{steps.coverage.outputs.prop}}
          TRESHOLD_COVERAGE: ${{steps.treshold-coverage.outputs.prop}}
        run: |
          echo "Quaility Gate: checking test coverage is above threshold ..."
          echo "Threshold                     : $TRESHOLD_COVERAGE %"
          echo "Current test coverage: $CURRENT_COVERAGE %"
          AVERAGE_COVERAGE=`echo|awk -v y1=$CURRENT_COVERAGE '{print y1+0.003}'`
          if (( $(echo "$AVERAGE_COVERAGE $TRESHOLD_COVERAGE" | awk '{print ($1 >= $2)}') )); then
            echo "OK"
          else
            echo "Current test coverage is below threshold. Please add more unit tests or adjust threshold to a lower value."
            echo "Failed"
            exit 1
          fi

